services:
  django_appci:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: "django_appci"
    expose:
      - "8000"
    volumes:
      - AppCI:/AppCI
      - nginx_reverse_proxy_certbot-etc:/etc/letsencrypt
      - nginx_reverse_proxy_certbot-var:/var/lib/letsencrypt
    command: gunicorn AppCI.wsgi:application --bind 0.0.0.0:8000            
    env_file:
      - .env.prod
    environment:
      - DJANGO_ENV=production
      - PG_HOST=db
    networks:
      - shared_network
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres:16-alpine
    container_name: "postgres_appci"
    ports:
      - "5435:5432"
    restart: always
    env_file:
      -  ".env.prod"
    volumes:
      - .postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - shared_network
  # certbot:
  #   image: certbot/certbot
  #   container_name: certbot
  #   volumes:
  #     - certbot-etc:/etc/letsencrypt
  #     - certbot-var:/var/lib/letsencrypt
  #     - ./webroot:/var/www/certbot
  #   depends_on:
  #     - nginx-reverse-proxy
  #  command: certonly --webroot --webroot-path=/var/www/certbot --non-interactive --email nataliamdenk11@gmail.com --agree-tos --no-eff-email -d appci.rhonidev.com
  #   networks:
  #     - shared_network
volumes:
  AppCI:
  postgres_data:
  nginx_reverse_proxy_certbot-etc:
    external: true
  nginx_reverse_proxy_certbot-var:
    external: true
  vhost:
  webroot:
networks:
  shared_network:
    external: true
