services:
  django:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: "django_appci"
    expose:
      - "8000"
    volumes:
      - AppCI:/AppCI
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    command: gunicorn AppCI.wsgi:application --bind 0.0.0.0:8000            
    env_file:
      - .env.prod
    environment:
      - DJANGO_ENV=production
      - PG_HOST=db
    networks:
      - shared_network
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres:16-alpine
    container_name: "postgres_appci"
    ports:
      - "5435:5432"
    restart: always
    env_file:
      -  ".env.prod"
    volumes:
      - .postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - shared_network
#   nginx-proxy:
#     container_name: nginx-proxy
#     build: ./nginx
#     ports:
#       - 80:80
#       - 443:443
#     depends_on:
#       - django
#     volumes:
#       - ./AppCI:/AppCI
#       - certbot-etc:/etc/letsencrypt
#       - certbot-var:/var/lib/letsencrypt
#       - vhost:/etc/nginx/vhost.d
#       - /var/run/docker.sock:/tmp/docker.sock:ro
#       - ./webroot:/var/www/certbot
#     restart: on-failure
#     networks:
#       - app_network
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./webroot:/var/www/certbot
    # depends_on:
    #   - nginx-reverse-proxy
#    command: certonly --webroot --webroot-path=/var/www/certbot --non-interactive --email nataliamdenk11@gmail.com --agree-tos --no-eff-email -d appci.rhonidev.com
    networks:
      - shared_network
    restart: unless-stopped
volumes:
  AppCI:
  postgres_data:
  certbot-etc:
  certbot-var:
  vhost:
  webroot:
networks:
  shared_network:
    external: true
