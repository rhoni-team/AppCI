services:
  django:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: "django_appci"
    expose:
      - "8000"
    volumes:
      - ./AppCI:/AppCI
    command: gunicorn AppCI.wsgi:application --bind 0.0.0.0:8000            
    env_file:
      - .env.prod
    environment:
      - DJANGO_ENV=production
      - PG_HOST=db
    networks:
      - app_network
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres:16-alpine
    container_name: "postgres_appci"
    ports:
      - "5435:5432"
    restart: unless-stopped
    env_file:
      -  ".env.prod"
    volumes:
      - .postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network
  nginx-proxy:
    container_name: nginx-proxy
    build: ./nginx
    ports:
      - 80:80
      - 443:443
    depends_on:
      - django
    volumes:
      - ./AppCI:/AppCI
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - vhost:/etc/nginx/vhost.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - app_network
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    depends_on:
      - nginx-proxy
    command: certonly --email nataliamdenk11@gmail.com --agree-tos --no-eff-email --staging -d appci.rhonidev.com  -d www.appci.rhonidev.com

volumes:
  postgres_data:
  certbot-etc:
  certbot-var:
  vhost:

networks:
  app_network:
    driver: bridge
